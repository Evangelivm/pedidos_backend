generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model caja_diaria {
  id               Int                @id @default(autoincrement())
  fecha            DateTime           @unique(map: "fecha_UNIQUE") @db.Date
  apertura         Decimal            @default(0.00) @db.Decimal(10, 2)
  cierre           Decimal?           @db.Decimal(10, 2)
  total_ventas     Decimal?           @default(0.00) @db.Decimal(10, 2)
  total_gastos     Decimal?           @default(0.00) @db.Decimal(10, 2)
  diferencia       Decimal?           @default(0.00) @db.Decimal(10, 2)
  estado           caja_diaria_estado @default(ABIERTA)
  notas            String?            @db.Text
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  updated_at       DateTime?          @default(now()) @db.Timestamp(0)
  movimientos_caja movimientos_caja[]
}

model categorias {
  id          Int         @id @default(autoincrement())
  nombre      String      @unique(map: "nombre_UNIQUE") @db.VarChar(100)
  descripcion String?     @db.Text
  created_at  DateTime?   @default(now()) @db.Timestamp(0)
  updated_at  DateTime?   @default(now()) @db.Timestamp(0)
  productos   productos[]
}

model clientes {
  id               Int                     @id @default(autoincrement())
  nombre           String                  @db.VarChar(100)
  tipo_documento   clientes_tipo_documento @default(DNI)
  numero_documento String?                 @db.VarChar(20)
  direccion        String?                 @db.VarChar(255)
  telefono         String?                 @db.VarChar(20)
  email            String?                 @db.VarChar(100)
  notas            String?                 @db.Text
  activo           Boolean                 @default(true)
  created_at       DateTime?               @default(now()) @db.Timestamp(0)
  updated_at       DateTime?               @default(now()) @db.Timestamp(0)
  pedidos          pedidos[]
}

model despachos {
  id                Int              @id @default(autoincrement())
  pedido_id         Int
  fecha             DateTime         @db.Date
  direccion_entrega String           @db.VarChar(255)
  contacto_entrega  String?          @db.VarChar(100)
  telefono_entrega  String?          @db.VarChar(20)
  estado            despachos_estado @default(PENDIENTE)
  notas             String?          @db.Text
  created_at        DateTime?        @default(now()) @db.Timestamp(0)
  updated_at        DateTime?        @default(now()) @db.Timestamp(0)
  pedidos           pedidos          @relation(fields: [pedido_id], references: [id], onDelete: Cascade, map: "fk_despachos_pedidos")

  @@index([pedido_id], map: "fk_despachos_pedidos_idx")
}

model detalle_entradas_mercaderia {
  id                  Int                 @id @default(autoincrement())
  entrada_id          Int
  producto_id         Int
  cantidad            Int
  precio_unitario     Decimal             @db.Decimal(10, 2)
  subtotal            Decimal             @db.Decimal(10, 2)
  created_at          DateTime?           @default(now()) @db.Timestamp(0)
  updated_at          DateTime?           @default(now()) @db.Timestamp(0)
  entradas_mercaderia entradas_mercaderia @relation(fields: [entrada_id], references: [id], onDelete: Cascade, map: "fk_detalle_entradas_entradas")
  productos           productos           @relation(fields: [producto_id], references: [id], map: "fk_detalle_entradas_productos")

  @@index([entrada_id], map: "fk_detalle_entradas_entradas_idx")
  @@index([producto_id], map: "fk_detalle_entradas_productos_idx")
}

model detalle_pedidos {
  id              Int       @id @default(autoincrement())
  pedido_id       Int
  producto_id     Int
  cantidad        Int
  precio_unitario Decimal   @db.Decimal(10, 2)
  subtotal        Decimal   @db.Decimal(10, 2)
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  pedidos         pedidos   @relation(fields: [pedido_id], references: [id], onDelete: Cascade, map: "fk_detalle_pedidos_pedidos")
  productos       productos @relation(fields: [producto_id], references: [id], map: "fk_detalle_pedidos_productos")

  @@index([pedido_id], map: "fk_detalle_pedidos_pedidos_idx")
  @@index([producto_id], map: "fk_detalle_pedidos_productos_idx")
}

model entradas_mercaderia {
  id                          Int                           @id @default(autoincrement())
  fecha                       DateTime                      @db.Date
  proveedor_id                Int
  numero_factura              String?                       @db.VarChar(50)
  total                       Decimal                       @default(0.00) @db.Decimal(10, 2)
  notas                       String?                       @db.Text
  created_at                  DateTime?                     @default(now()) @db.Timestamp(0)
  updated_at                  DateTime?                     @default(now()) @db.Timestamp(0)
  detalle_entradas_mercaderia detalle_entradas_mercaderia[]
  proveedores                 proveedores                   @relation(fields: [proveedor_id], references: [id], map: "fk_entradas_mercaderia_proveedores")

  @@index([proveedor_id], map: "fk_entradas_mercaderia_proveedores_idx")
}

model gastos {
  id          Int         @id @default(autoincrement())
  fecha       DateTime    @db.Date
  concepto    String      @db.VarChar(255)
  monto       Decimal     @db.Decimal(10, 2)
  tipo        gastos_tipo @default(VARIABLE)
  categoria   String?     @db.VarChar(100)
  comprobante String?     @db.VarChar(100)
  notas       String?     @db.Text
  created_at  DateTime?   @default(now()) @db.Timestamp(0)
  updated_at  DateTime?   @default(now()) @db.Timestamp(0)
}

model movimientos_caja {
  id              Int                               @id @default(autoincrement())
  caja_id         Int
  fecha_hora      DateTime                          @db.DateTime(0)
  tipo            movimientos_caja_tipo
  concepto        String                            @db.VarChar(255)
  monto           Decimal                           @db.Decimal(10, 2)
  referencia_id   Int?
  referencia_tipo movimientos_caja_referencia_tipo?
  created_at      DateTime?                         @default(now()) @db.Timestamp(0)
  updated_at      DateTime?                         @default(now()) @db.Timestamp(0)
  caja_diaria     caja_diaria                       @relation(fields: [caja_id], references: [id], onDelete: Cascade, map: "fk_movimientos_caja_caja")

  @@index([caja_id], map: "fk_movimientos_caja_caja_idx")
}

model pagos {
  id          Int               @id @default(autoincrement())
  pedido_id   Int
  fecha       DateTime          @db.Date
  monto       Decimal           @db.Decimal(10, 2)
  metodo_pago pagos_metodo_pago @default(EFECTIVO)
  referencia  String?           @db.VarChar(100)
  notas       String?           @db.Text
  created_at  DateTime?         @default(now()) @db.Timestamp(0)
  updated_at  DateTime?         @default(now()) @db.Timestamp(0)
  pedidos     pedidos           @relation(fields: [pedido_id], references: [id], onDelete: Cascade, map: "fk_pagos_pedidos")

  @@index([pedido_id], map: "fk_pagos_pedidos_idx")
}

model pedidos {
  id              Int               @id @default(autoincrement())
  numero          String            @unique(map: "numero_UNIQUE") @db.VarChar(20)
  fecha           DateTime          @db.Date
  cliente_id      Int
  subtotal        Decimal           @default(0.00) @db.Decimal(10, 2)
  igv             Decimal           @default(0.00) @db.Decimal(10, 2)
  total           Decimal           @default(0.00) @db.Decimal(10, 2)
  estado          pedidos_estado    @default(PENDIENTE)
  notas           String?           @db.Text
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @default(now()) @db.Timestamp(0)
  despachos       despachos[]
  detalle_pedidos detalle_pedidos[]
  pagos           pagos[]
  clientes        clientes          @relation(fields: [cliente_id], references: [id], map: "fk_pedidos_clientes")

  @@index([cliente_id], map: "fk_pedidos_clientes_idx")
}

model presentaciones {
  id          Int         @id @default(autoincrement())
  nombre      String      @unique(map: "nombre_UNIQUE") @db.VarChar(50)
  descripcion String?     @db.Text
  created_at  DateTime?   @default(now()) @db.Timestamp(0)
  updated_at  DateTime?   @default(now()) @db.Timestamp(0)
  productos   productos[]
}

model productos {
  id                          Int                           @id @default(autoincrement())
  codigo                      String                        @db.VarChar(20)
  descripcion                 String                        @db.VarChar(255)
  categoria_id                Int
  presentacion_id             Int
  precio_sugerido             Decimal?                      @db.Decimal(10, 2)
  precio_minimo               Decimal?                      @db.Decimal(10, 2)
  stock                       Int                           @default(0)
  stock_minimo                Int                           @default(5)
  imagen                      String?                       @db.VarChar(255)
  activo                      Boolean                       @default(true)
  created_at                  DateTime?                     @default(now()) @db.Timestamp(0)
  updated_at                  DateTime?                     @default(now()) @db.Timestamp(0)
  detalle_entradas_mercaderia detalle_entradas_mercaderia[]
  detalle_pedidos             detalle_pedidos[]
  categorias                  categorias                    @relation(fields: [categoria_id], references: [id], map: "fk_productos_categorias")
  presentaciones              presentaciones                @relation(fields: [presentacion_id], references: [id], map: "fk_productos_presentaciones")

  @@index([categoria_id], map: "fk_productos_categorias_idx")
  @@index([presentacion_id], map: "fk_productos_presentaciones_idx")
}

model proveedores {
  id                  Int                   @id @default(autoincrement())
  nombre              String                @db.VarChar(100)
  ruc                 String?               @unique(map: "ruc_UNIQUE") @db.VarChar(20)
  direccion           String?               @db.VarChar(255)
  telefono            String?               @db.VarChar(20)
  email               String?               @db.VarChar(100)
  contacto            String?               @db.VarChar(100)
  notas               String?               @db.Text
  activo              Boolean               @default(true)
  created_at          DateTime?             @default(now()) @db.Timestamp(0)
  updated_at          DateTime?             @default(now()) @db.Timestamp(0)
  entradas_mercaderia entradas_mercaderia[]
}

enum clientes_tipo_documento {
  DNI
  RUC
  CE
  PASAPORTE
  SD
}

enum movimientos_caja_tipo {
  INGRESO
  EGRESO
}

enum gastos_tipo {
  FIJO
  VARIABLE
}

enum pagos_metodo_pago {
  EFECTIVO
  TRANSFERENCIA
  TARJETA
  YAPE
  PLIN
  OTRO
}

enum despachos_estado {
  PENDIENTE
  EN_RUTA
  ENTREGADO
  CANCELADO
}

enum caja_diaria_estado {
  ABIERTA
  CERRADA
}

enum movimientos_caja_referencia_tipo {
  VENTA
  GASTO
  OTRO
}

enum pedidos_estado {
  PENDIENTE
  PAGADO
  DESPACHADO
  ANULADO
}
